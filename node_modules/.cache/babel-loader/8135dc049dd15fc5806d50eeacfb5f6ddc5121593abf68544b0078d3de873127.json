{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Downloads\\\\poojitha\\\\poojitha\\\\src\\\\components\\\\KanbanBoard.js\";\nimport React from 'react';\nimport TicketCard from './TicketCard';\nimport './KanbanBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KanbanBoard = ({\n  tickets,\n  groupOption,\n  sortOption\n}) => {\n  // Group and sort the tickets based on user selection\n  const groupedAndSortedTickets = groupAndSortTickets(tickets, groupOption, sortOption);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"kanban-board\",\n    children: groupedAndSortedTickets.map(column => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"kanban-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"column-heading\",\n        children: getHeadingText(column.groupName)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 11\n      }, this), column.tickets.map(ticket => /*#__PURE__*/_jsxDEV(TicketCard, {\n        ticket: ticket\n      }, ticket.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this))]\n    }, column.groupName, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n\n// Function to group and sort tickets based on user selection\n_c = KanbanBoard;\nconst groupAndSortTickets = (tickets, groupOption, sortOption) => {\n  let groupedTickets = [];\n\n  // Group tickets based on the selected option\n  switch (groupOption) {\n    case 'status':\n      groupedTickets = groupByStatus(tickets);\n      break;\n    case 'user':\n      groupedTickets = groupByUser(tickets);\n      break;\n    case 'priority':\n      groupedTickets = groupByPriority(tickets);\n      break;\n    default:\n      // Default to grouping by status if no valid option is selected\n      groupedTickets = groupByStatus(tickets);\n  }\n\n  // Sort tickets within each group based on the selected option\n  groupedTickets.forEach(group => {\n    group.tickets.sort((a, b) => {\n      if (sortOption === 'priority') {\n        return b.priority - a.priority;\n      } else if (sortOption === 'title') {\n        return a.title.localeCompare(b.title);\n      }\n      return 0;\n    });\n  });\n  return groupedTickets;\n};\n\n// Function to group tickets by status\nconst groupByStatus = tickets => {\n  const grouped = {};\n  tickets.forEach(ticket => {\n    if (!grouped[ticket.status]) {\n      grouped[ticket.status] = {\n        groupName: ticket.status,\n        tickets: []\n      };\n    }\n    grouped[ticket.status].tickets.push(ticket);\n  });\n  return Object.values(grouped);\n};\n\n// Function to group tickets by user\nconst groupByUser = tickets => {\n  const grouped = {};\n  tickets.forEach(ticket => {\n    if (!grouped[ticket.userId]) {\n      grouped[ticket.userId] = {\n        groupName: ticket.userId,\n        tickets: []\n      };\n    }\n    grouped[ticket.userId].tickets.push(ticket);\n  });\n  return Object.values(grouped);\n};\n\n// Function to group tickets by priority\nconst groupByPriority = tickets => {\n  const grouped = {};\n  tickets.forEach(ticket => {\n    const priorityGroup = `Priority ${ticket.priority}`;\n    if (!grouped[priorityGroup]) {\n      grouped[priorityGroup] = {\n        groupName: priorityGroup,\n        tickets: []\n      };\n    }\n    grouped[priorityGroup].tickets.push(ticket);\n  });\n  return Object.values(grouped);\n};\n\n// Function to get heading text based on mapped values\nconst getHeadingText = groupName => {\n  const priorityMap = {\n    'Priority 4': 'Urgent 4',\n    'Priority 3': 'High 3',\n    'Priority 2': 'Medium 2',\n    'Priority 1': 'Low 1',\n    'Priority 0': 'No priority'\n  };\n  return priorityMap[groupName] || groupName;\n};\nexport default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","TicketCard","jsxDEV","_jsxDEV","KanbanBoard","tickets","groupOption","sortOption","groupedAndSortedTickets","groupAndSortTickets","className","children","map","column","getHeadingText","groupName","fileName","_jsxFileName","lineNumber","columnNumber","ticket","id","_c","groupedTickets","groupByStatus","groupByUser","groupByPriority","forEach","group","sort","a","b","priority","title","localeCompare","grouped","status","push","Object","values","userId","priorityGroup","priorityMap","$RefreshReg$"],"sources":["C:/Users/hp/Downloads/poojitha/poojitha/src/components/KanbanBoard.js"],"sourcesContent":["import React from 'react';\r\nimport TicketCard from './TicketCard';\r\nimport './KanbanBoard.css';\r\n\r\nconst KanbanBoard = ({ tickets, groupOption, sortOption }) => {\r\n  // Group and sort the tickets based on user selection\r\n  const groupedAndSortedTickets = groupAndSortTickets(tickets, groupOption, sortOption);\r\n\r\n  return (\r\n    <div className=\"kanban-board\">\r\n      {/* Render columns based on grouped and sorted tickets */}\r\n      {groupedAndSortedTickets.map((column) => (\r\n        <div key={column.groupName} className=\"kanban-column\">\r\n          <h2 className=\"column-heading\">{getHeadingText(column.groupName)}</h2>\r\n          {/* Render TicketCards in the column */}\r\n          {column.tickets.map((ticket) => (\r\n            <TicketCard key={ticket.id} ticket={ticket} />\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Function to group and sort tickets based on user selection\r\nconst groupAndSortTickets = (tickets, groupOption, sortOption) => {\r\n  let groupedTickets = [];\r\n\r\n  // Group tickets based on the selected option\r\n  switch (groupOption) {\r\n    case 'status':\r\n      groupedTickets = groupByStatus(tickets);\r\n      break;\r\n    case 'user':\r\n      groupedTickets = groupByUser(tickets);\r\n      break;\r\n    case 'priority':\r\n      groupedTickets = groupByPriority(tickets);\r\n      break;\r\n    default:\r\n      // Default to grouping by status if no valid option is selected\r\n      groupedTickets = groupByStatus(tickets);\r\n  }\r\n\r\n  // Sort tickets within each group based on the selected option\r\n  groupedTickets.forEach((group) => {\r\n    group.tickets.sort((a, b) => {\r\n      if (sortOption === 'priority') {\r\n        return b.priority - a.priority;\r\n      } else if (sortOption === 'title') {\r\n        return a.title.localeCompare(b.title);\r\n      }\r\n      return 0;\r\n    });\r\n  });\r\n\r\n  return groupedTickets;\r\n};\r\n\r\n// Function to group tickets by status\r\nconst groupByStatus = (tickets) => {\r\n  const grouped = {};\r\n  tickets.forEach((ticket) => {\r\n    if (!grouped[ticket.status]) {\r\n      grouped[ticket.status] = { groupName: ticket.status, tickets: [] };\r\n    }\r\n    grouped[ticket.status].tickets.push(ticket);\r\n  });\r\n  return Object.values(grouped);\r\n};\r\n\r\n// Function to group tickets by user\r\nconst groupByUser = (tickets) => {\r\n  const grouped = {};\r\n  tickets.forEach((ticket) => {\r\n    if (!grouped[ticket.userId]) {\r\n      grouped[ticket.userId] = { groupName: ticket.userId, tickets: [] };\r\n    }\r\n    grouped[ticket.userId].tickets.push(ticket);\r\n  });\r\n  return Object.values(grouped);\r\n};\r\n\r\n// Function to group tickets by priority\r\nconst groupByPriority = (tickets) => {\r\n  const grouped = {};\r\n  tickets.forEach((ticket) => {\r\n    const priorityGroup = `Priority ${ticket.priority}`;\r\n    if (!grouped[priorityGroup]) {\r\n      grouped[priorityGroup] = { groupName: priorityGroup, tickets: [] };\r\n    }\r\n    grouped[priorityGroup].tickets.push(ticket);\r\n  });\r\n  return Object.values(grouped);\r\n};\r\n\r\n// Function to get heading text based on mapped values\r\nconst getHeadingText = (groupName) => {\r\n  const priorityMap = {\r\n    'Priority 4': 'Urgent 4',\r\n    'Priority 3': 'High 3',\r\n    'Priority 2': 'Medium 2',\r\n    'Priority 1': 'Low 1',\r\n    'Priority 0': 'No priority',\r\n  };\r\n\r\n  return priorityMap[groupName] || groupName;\r\n};\r\n\r\nexport default KanbanBoard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}